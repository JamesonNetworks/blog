{"title":"A New Frontend Paradigm","subtitle":"Posted on December 12, 2013 by Brent","date":"1386824400000","markdown":{"sections":[{"title":"","contents":[{"type":"paragraph","content":"Every now and then you have epiphany moments during software development. My epiphany moment has come while working with javascript and attempting to write a frontend for a pet project of mine, http://www.semipho.com."},{"type":"paragraph","content":"I want to create a website which allows users to share their galleries with specific people that they choose to. Plenty of these sites exist already, but I have some unique idea that I think will set my site apart. In creating the ui for Semipho, I was able to quickly get a front end up in going in about 6 hours. I was happy with my work, and went about implementing new backend features. I was able to get gallery sharing working on the backend and set about creating the appropriate ui hooks. This is where I ran into a problem."},{"type":"paragraph","content":"After several hours of battling through my terribly muddled ui code, I decided to scrap the whole thing and start rewriting it. Development on Semipho stalled during this time while I worked to come up with an appropriate design pattern to handle my front end. The pattern I’ve decided on is a UI-Bilayer."},{"type":"paragraph","content":"The UI-Bilayer describes a way of interacting with a RESTful back end in order to promote code sharing between UI ‘views’. I’m creating a view as a way of looking at an aspect of an application. For Semipho, the index view serves as a way for viewing photos in a person’s gallery of images. All of the html content is segregated into two files, an index.html file and an index_templates.html file. Then, two javascript files control the interaction with the front end. The ‘view’ javascript file manipulates all of the markup and the DOM and the ‘core’ javascript file handles interacting with the service. Multiple view files can call into the core file in order to interact with the service, and the core module triggers events on a defined element in the view. Using this design, a single core file can be responsible for all interactions with a service, and the view file can respond accordingly. Decoupling all markup and building an event driven user interface allows the developer to build a UI which is easily extensible by adding new view functions and new events to interact."},{"type":"paragraph","content":"I’m using Bootstrap, jQuery, jQuery-ui, and Mustache to quickly build robust front ends."},{"type":"paragraph","content":"I’m going to work on a proof of concept and create a demo on github which will demonstrate the design pattern."}]}]}}